{"ast":null,"code":"var _jsxFileName = \"/home/kbly/Masa\\xFCst\\xFC/React-E-commerceApp/src/context/filter_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport reducer from '../reducers/filter_reducer';\nimport { LOAD_PRODUCTS, SET_GRIDVIEW, SET_LISTVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\nimport { useProductsContext } from './products_context';\nimport products_reducer from '../reducers/products_reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  filtered_products: [],\n  all_products: [],\n  grid_view: tru,\n  // Burası grid view gösterimi için kullanılacakürünlerin alt alta açıklamalı yada normal olmasını sağlamak için düzenlenen bir sistem.\n  sort: 'price-highest'\n};\nconst FilterContext = /*#__PURE__*/React.createContext();\nexport const FilterProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    products\n  } = useProductsContext(); // Filtreleme yapabilmek için ürünlere sahip olmamız gerekiyor.Ana sayfada zaten fetch işlemi yapmıştık y\n  //tekerleği yeniden icat etmey gerek yok . Hem sistemde hız  hemde zaman tasarrufu için kullanabiliriz.\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    //Dataları aldığımız yer burası.\n    //Burada dataları bu yeni Hookumuzun içine aktarıyoruz\n    dispatch({\n      type: LOAD_PRODUCTS,\n      payload: products\n    });\n  }, [products]);\n  useEffect(() => {\n    dispatch({\n      type: FILTER_PRODUCTS\n    });\n    dispatch({\n      type: SORT_PRODUCTS\n    });\n  }, [products, state.sort, state.filters]);\n\n  const setGridView = () => {\n    dispatch({\n      type: SET_GRIDVIEW\n    });\n  };\n\n  const setListView = () => {\n    dispatch({\n      type: SET_LISTVIEW\n    });\n  };\n\n  const updateSort = e => {\n    /* Kullanıcıdan gelen bilgilere göre sıralama yapılan yer.\n    Burada e.targer.name ise sort isimli form'dan bu bilginin geldiğini biliyoruz.\n    Burada dispatch ederek gerekli sıralama işlemi yapılması sağlanıyor. */\n    //const userwant=e.target.name \n    const userwant_value = e.target.value; //console.log(userwant,userwant_value)\n\n    dispatch({\n      type: 'UPDATE_SORT',\n      payload: userwant_value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FilterContext.Provider, {\n    value: { ...state,\n      setGridView,\n      setListView,\n      updateSort\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}; // make sure use\n\n_s(FilterProvider, \"uddh4dNHZdf+YUdlAheeMx6qpD8=\", false, function () {\n  return [useProductsContext];\n});\n\n_c = FilterProvider;\nexport const useFilterContext = () => {\n  _s2();\n\n  return useContext(FilterContext);\n};\n\n_s2(useFilterContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterProvider\");","map":{"version":3,"sources":["/home/kbly/Masaüstü/React-E-commerceApp/src/context/filter_context.js"],"names":["React","useEffect","useContext","useReducer","reducer","LOAD_PRODUCTS","SET_GRIDVIEW","SET_LISTVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","useProductsContext","products_reducer","initialState","filtered_products","all_products","grid_view","tru","sort","FilterContext","createContext","FilterProvider","children","products","state","dispatch","type","payload","filters","setGridView","setListView","updateSort","e","userwant_value","target","value","useFilterContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,UAAvC,QAAyD,OAAzD;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,aARF,QASO,YATP;AAUA,SAASC,kBAAT,QAAmC,oBAAnC;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAC,EADC;AAEnBC,EAAAA,YAAY,EAAC,EAFM;AAGnBC,EAAAA,SAAS,EAACC,GAHS;AAGJ;AACfC,EAAAA,IAAI,EAAC;AAJc,CAArB;AAOA,MAAMC,aAAa,gBAAGrB,KAAK,CAACsB,aAAN,EAAtB;AAEA,OAAO,MAAMC,cAAc,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAEhD,QAAM;AAACC,IAAAA;AAAD,MAAWZ,kBAAkB,EAAnC,CAFgD,CAET;AACvC;;AACA,QAAM,CAACa,KAAD,EAAOC,QAAP,IAAiBxB,UAAU,CAACC,OAAD,EAASW,YAAT,CAAjC;AAGAd,EAAAA,SAAS,CAAC,MAAI;AACZ;AACA;AACA0B,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACvB,aAAN;AAAoBwB,MAAAA,OAAO,EAACJ;AAA5B,KAAD,CAAR;AACD,GAJQ,EAIP,CAACA,QAAD,CAJO,CAAT;AAMAxB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACAgB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEnB;AAAR,KAAD,CAAR;AACD,GAHQ,EAGN,CAACgB,QAAD,EAAWC,KAAK,CAACN,IAAjB,EAAuBM,KAAK,CAACI,OAA7B,CAHM,CAAT;;AAOA,QAAMC,WAAW,GAAG,MAAM;AACxBJ,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACtB;AAAN,KAAD,CAAR;AACD,GAFD;;AAKA,QAAM0B,WAAW,GAAG,MAAM;AACxBL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACrB;AAAN,KAAD,CAAR;AACD,GAFD;;AAMA,QAAM0B,UAAU,GAAEC,CAAD,IAAK;AACpB;AACF;AACA;AACA;AACA,UAAMC,cAAc,GAACD,CAAC,CAACE,MAAF,CAASC,KAA9B,CALsB,CAMtB;;AACAV,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAC,aAAN;AAAoBC,MAAAA,OAAO,EAACM;AAA5B,KAAD,CAAR;AAGC,GAVD;;AAcE,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,EAAC,GAAGT,KAAJ;AAAUK,MAAAA,WAAV;AAAsBC,MAAAA,WAAtB;AAAkCC,MAAAA;AAAlC,KAA/B;AAAA,cACGT;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlDM,C,CAmDP;;GAnDaD,c;UAEIV,kB;;;KAFJU,c;AAoDb,OAAO,MAAMe,gBAAgB,GAAG,MAAM;AAAA;;AACpC,SAAOpC,UAAU,CAACmB,aAAD,CAAjB;AACD,CAFM;;IAAMiB,gB","sourcesContent":["import React, { useEffect, useContext, useReducer } from 'react'\nimport reducer from '../reducers/filter_reducer'\nimport {\n  LOAD_PRODUCTS,\n  SET_GRIDVIEW,\n  SET_LISTVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions'\nimport { useProductsContext } from './products_context'\nimport products_reducer from '../reducers/products_reducer'\n\nconst initialState = {\n  filtered_products:[],\n  all_products:[],\n  grid_view:tru, // Burası grid view gösterimi için kullanılacakürünlerin alt alta açıklamalı yada normal olmasını sağlamak için düzenlenen bir sistem.\n  sort:'price-highest'\n}\n\nconst FilterContext = React.createContext()\n\nexport const FilterProvider = ({ children }) => {\n\nconst {products}=useProductsContext(); // Filtreleme yapabilmek için ürünlere sahip olmamız gerekiyor.Ana sayfada zaten fetch işlemi yapmıştık y\n//tekerleği yeniden icat etmey gerek yok . Hem sistemde hız  hemde zaman tasarrufu için kullanabiliriz.\nconst [state,dispatch]=useReducer(reducer,initialState);\n\n\nuseEffect(()=>{\n  //Dataları aldığımız yer burası.\n  //Burada dataları bu yeni Hookumuzun içine aktarıyoruz\n  dispatch({type:LOAD_PRODUCTS,payload:products})\n},[products])\n\nuseEffect(() => {\n  dispatch({ type: FILTER_PRODUCTS })\n  dispatch({ type: SORT_PRODUCTS })\n}, [products, state.sort, state.filters])\n\n\n  \nconst setGridView = () => {\n  dispatch({type:SET_GRIDVIEW})\n}\n\n\nconst setListView = () => {\n  dispatch({type:SET_LISTVIEW})\n}\n\n\n\nconst updateSort=(e)=>{\n  /* Kullanıcıdan gelen bilgilere göre sıralama yapılan yer.\n  Burada e.targer.name ise sort isimli form'dan bu bilginin geldiğini biliyoruz.\n  Burada dispatch ederek gerekli sıralama işlemi yapılması sağlanıyor. */\n//const userwant=e.target.name \nconst userwant_value=e.target.value\n//console.log(userwant,userwant_value)\ndispatch({type:'UPDATE_SORT',payload:userwant_value})\n\n\n}\n\n\n\n  return (\n    <FilterContext.Provider value={{...state,setGridView,setListView,updateSort}}>\n      {children}\n    </FilterContext.Provider>\n  )\n}\n// make sure use\nexport const useFilterContext = () => {\n  return useContext(FilterContext)\n}\n"]},"metadata":{},"sourceType":"module"}
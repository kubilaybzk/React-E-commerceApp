{"ast":null,"code":"var _jsxFileName = \"/home/kbly/Masa\\xFCst\\xFC/React-E-commerceApp/src/context/filter_context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useContext, useReducer } from 'react';\nimport reducer from '../reducers/filter_reducer';\nimport { LOAD_PRODUCTS, SET_GRIDVIEW, SET_LISTVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\nimport { useProductsContext } from './products_context';\nimport products_reducer from '../reducers/products_reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  filtered_products: [],\n  // Tüm elemanların düzenlenip sıralama yapıldığı yer.\n  all_products: [],\n  //Tüm ürünlerin listelendiği değer.\n  grid_view: true,\n  // Burası grid view gösterimi için kullanılacakürünlerin alt alta açıklamalı yada normal olmasını sağlamak için düzenlenen bir sistem.\n  sort: 'price-lowest',\n  //Default olarak price-lowest değerini burada atıyoruz.\n  filters: {\n    text: '',\n    company: 'all',\n    category: 'all',\n    color: 'all',\n    min_price: 0,\n    max_price: 0,\n    price: 0,\n    shipping: false\n  }\n};\nconst FilterContext = /*#__PURE__*/React.createContext();\nexport const FilterProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const {\n    products\n  } = useProductsContext(); // Filtreleme yapabilmek için ürünlere sahip olmamız gerekiyor.Ana sayfada zaten fetch işlemi yapmıştık y\n  //tekerleği yeniden icat etmey gerek yok . Hem sistemde hız  hemde zaman tasarrufu için kullanabiliriz.\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    //Dataları aldığımız yer burası.\n    //Burada dataları bu yeni Hookumuzun içine aktarıyoruz\n    dispatch({\n      type: LOAD_PRODUCTS,\n      payload: products\n    });\n  }, [products]);\n  useEffect(() => {\n    dispatch({\n      type: FILTER_PRODUCTS\n    });\n    dispatch({\n      type: SORT_PRODUCTS\n    });\n  }, [products, state.sort, state.filters]);\n\n  const setGridView = () => {\n    dispatch({\n      type: SET_GRIDVIEW\n    });\n  };\n\n  const setListView = () => {\n    dispatch({\n      type: SET_LISTVIEW\n    });\n  };\n\n  const updateSort = e => {\n    /* Kullanıcıdan gelen bilgilere göre sıralama yapılan yer.\n    Burada e.targer.name ise sort isimli form'dan bu bilginin geldiğini biliyoruz.\n    Burada dispatch ederek gerekli sıralama işlemi yapılması sağlanıyor. */\n    //const userwant=e.target.name \n    const userwant_value = e.target.value; //console.log(userwant,userwant_value)\n\n    dispatch({\n      type: UPDATE_SORT,\n      payload: userwant_value\n    });\n  };\n\n  const updateFılters = e => {};\n\n  const clearFılters = () => {};\n\n  return /*#__PURE__*/_jsxDEV(FilterContext.Provider, {\n    value: { ...state,\n      setGridView,\n      setListView,\n      updateSort,\n      updateFılters\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}; // make sure use\n\n_s(FilterProvider, \"uddh4dNHZdf+YUdlAheeMx6qpD8=\", false, function () {\n  return [useProductsContext];\n});\n\n_c = FilterProvider;\nexport const useFilterContext = () => {\n  _s2();\n\n  return useContext(FilterContext);\n};\n\n_s2(useFilterContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterProvider\");","map":{"version":3,"sources":["/home/kbly/Masaüstü/React-E-commerceApp/src/context/filter_context.js"],"names":["React","useEffect","useContext","useReducer","reducer","LOAD_PRODUCTS","SET_GRIDVIEW","SET_LISTVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","useProductsContext","products_reducer","initialState","filtered_products","all_products","grid_view","sort","filters","text","company","category","color","min_price","max_price","price","shipping","FilterContext","createContext","FilterProvider","children","products","state","dispatch","type","payload","setGridView","setListView","updateSort","e","userwant_value","target","value","updateFılters","clearFılters","useFilterContext"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useReducer } from 'react'\nimport reducer from '../reducers/filter_reducer'\nimport {\n  LOAD_PRODUCTS,\n  SET_GRIDVIEW,\n  SET_LISTVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions'\nimport { useProductsContext } from './products_context'\nimport products_reducer from '../reducers/products_reducer'\n\nconst initialState = {\n  filtered_products:[], // Tüm elemanların düzenlenip sıralama yapıldığı yer.\n  all_products:[], //Tüm ürünlerin listelendiği değer.\n  grid_view:true, // Burası grid view gösterimi için kullanılacakürünlerin alt alta açıklamalı yada normal olmasını sağlamak için düzenlenen bir sistem.\n  sort:'price-lowest' ,//Default olarak price-lowest değerini burada atıyoruz.\n  filters: {\n    text: '',\n    company: 'all',\n    category: 'all',\n    color: 'all',\n    min_price: 0,\n    max_price: 0,\n    price: 0,\n    shipping: false,\n  },\n}\n\nconst FilterContext = React.createContext()\n\nexport const FilterProvider = ({ children }) => {\n\nconst {products}=useProductsContext(); // Filtreleme yapabilmek için ürünlere sahip olmamız gerekiyor.Ana sayfada zaten fetch işlemi yapmıştık y\n//tekerleği yeniden icat etmey gerek yok . Hem sistemde hız  hemde zaman tasarrufu için kullanabiliriz.\nconst [state,dispatch]=useReducer(reducer,initialState);\n\n\nuseEffect(()=>{\n  //Dataları aldığımız yer burası.\n  //Burada dataları bu yeni Hookumuzun içine aktarıyoruz\n  dispatch({type:LOAD_PRODUCTS,payload:products})\n},[products])\n\nuseEffect(() => {\n  dispatch({ type: FILTER_PRODUCTS })\n  dispatch({ type: SORT_PRODUCTS })\n}, [products, state.sort, state.filters])\n\n\n  \nconst setGridView = () => {\n  dispatch({type:SET_GRIDVIEW})\n}\n\n\nconst setListView = () => {\n  dispatch({type:SET_LISTVIEW})\n}\n\n\nconst updateSort=(e)=>{\n  /* Kullanıcıdan gelen bilgilere göre sıralama yapılan yer.\n  Burada e.targer.name ise sort isimli form'dan bu bilginin geldiğini biliyoruz.\n  Burada dispatch ederek gerekli sıralama işlemi yapılması sağlanıyor. */\n//const userwant=e.target.name \nconst userwant_value=e.target.value\n//console.log(userwant,userwant_value)\ndispatch({ type: UPDATE_SORT, payload: userwant_value })\n}\n\n\n\nconst updateFılters=(e)=>{\n\n}\n\nconst clearFılters=()=>{}\n\n\n\n  return (\n    <FilterContext.Provider value={{...state,setGridView,setListView,updateSort,updateFılters,}}>\n      {children}\n    </FilterContext.Provider>\n  )\n}\n// make sure use\nexport const useFilterContext = () => {\n  return useContext(FilterContext)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ADD_TO_CART, CLEAR_CART, COUNT_CART_TOTALS, REMOVE_CART_ITEM, TOGGLE_CART_ITEM_AMOUNT } from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n  //Ürün eklemek için.\n  if (action.type === ADD_TO_CART) {\n    const {\n      id,\n      color,\n      amount,\n      product\n    } = action.payload; // Bize gönderilen bilgileri alıyoruz.\n\n    const tempItem = state.cart.find(i => i.id === id + color); //Gelen bilgilerden ürünü buluyoruz\n\n    if (tempItem) {\n      const tempCart = state.cart.map(cartItem => {\n        //ÜRÜN DAHA ÖNCE EKLENMİŞ VE KULLANICI AYNI ÜRÜNÜ İKİNCİ DEFA EKLİYOR İSE.\n        //SEPETTE BU ÜRÜNDEN 2 TANE GÖZÜKMESİNİ İSTEMEYİZ BUNUN İÇİN\n        //BURADA AMACIMIZ ÜRÜN DAHA ÖNCE EKLENMİŞ VE TEKRAR EKLENİYOR İSE STOK MİKTARINI DEĞİŞTİRMEK\n        if (cartItem.id === id + color) {\n          let newAmount = cartItem.amount + amount;\n\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n\n          return { ...cartItem,\n            amount: newAmount\n          };\n        } else {\n          return cartItem;\n        }\n      });\n      return { ...state,\n        cart: tempCart\n      };\n    } else {\n      //Eğer ürün daha önce eklenmemiş ise otomatik olarak yeni bir eleman gibi davranmasını istiyoruz.\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock\n      };\n      return { ...state,\n        cart: [...state.cart, newItem]\n      };\n    }\n  }\n\n  return state;\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;","map":{"version":3,"sources":["/home/kbly/Masaüstü/React-E-commerceApp/src/reducers/cart_reducer.js"],"names":["ADD_TO_CART","CLEAR_CART","COUNT_CART_TOTALS","REMOVE_CART_ITEM","TOGGLE_CART_ITEM_AMOUNT","cart_reducer","state","action","type","id","color","amount","product","payload","tempItem","cart","find","i","tempCart","map","cartItem","newAmount","max","newItem","name","image","images","url","price","stock","Error"],"mappings":"AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,iBAHF,EAIEC,gBAJF,EAKEC,uBALF,QAMO,YANP;;AAQA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEtC;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgBR,WAApB,EAAiC;AAC/B,UAAM;AAAES,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,QAAiCL,MAAM,CAACM,OAA9C,CAD+B,CACwB;;AACvD,UAAMC,QAAQ,GAAGR,KAAK,CAACS,IAAN,CAAWC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACR,EAAF,KAASA,EAAE,GAAGC,KAArC,CAAjB,CAF+B,CAE+B;;AAC9D,QAAII,QAAJ,EAAc;AACT,YAAMI,QAAQ,GAAGZ,KAAK,CAACS,IAAN,CAAWI,GAAX,CAAgBC,QAAD,IAAc;AAC/C;AACA;AACA;AACA,YAAIA,QAAQ,CAACX,EAAT,KAAgBA,EAAE,GAAGC,KAAzB,EAAgC;AAC9B,cAAIW,SAAS,GAAGD,QAAQ,CAACT,MAAT,GAAkBA,MAAlC;;AACA,cAAIU,SAAS,GAAGD,QAAQ,CAACE,GAAzB,EAA8B;AAC5BD,YAAAA,SAAS,GAAGD,QAAQ,CAACE,GAArB;AACD;;AAED,iBAAO,EAAE,GAAGF,QAAL;AAAeT,YAAAA,MAAM,EAAEU;AAAvB,WAAP;AACD,SAPD,MAOO;AACL,iBAAOD,QAAP;AACD;AACF,OAdmB,CAAjB;AAgBH,aAAO,EAAE,GAAGd,KAAL;AAAYS,QAAAA,IAAI,EAAEG;AAAlB,OAAP;AACD,KAlBD,MAkBO;AACL;AACA,YAAMK,OAAO,GAAG;AACdd,QAAAA,EAAE,EAAEA,EAAE,GAAGC,KADK;AAEdc,QAAAA,IAAI,EAAEZ,OAAO,CAACY,IAFA;AAGdd,QAAAA,KAHc;AAIdC,QAAAA,MAJc;AAKdc,QAAAA,KAAK,EAAEb,OAAO,CAACc,MAAR,CAAe,CAAf,EAAkBC,GALX;AAMdC,QAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAND;AAOdN,QAAAA,GAAG,EAAEV,OAAO,CAACiB;AAPC,OAAhB;AASA,aAAO,EAAE,GAAGvB,KAAL;AAAYS,QAAAA,IAAI,EAAE,CAAC,GAAGT,KAAK,CAACS,IAAV,EAAgBQ,OAAhB;AAAlB,OAAP;AACD;AACF;;AAED,SAAOjB,KAAP;AACA,QAAM,IAAIwB,KAAJ,CAAW,gBAAevB,MAAM,CAACC,IAAK,iBAAtC,CAAN;AACD,CAzCD;;AA2CA,eAAeH,YAAf","sourcesContent":["import {\n  ADD_TO_CART,\n  CLEAR_CART,\n  COUNT_CART_TOTALS,\n  REMOVE_CART_ITEM,\n  TOGGLE_CART_ITEM_AMOUNT,\n} from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n\n  //Ürün eklemek için.\n  if (action.type === ADD_TO_CART) {\n    const { id, color, amount, product } = action.payload; // Bize gönderilen bilgileri alıyoruz.\n    const tempItem = state.cart.find((i) => i.id === id + color); //Gelen bilgilerden ürünü buluyoruz\n    if (tempItem) {\n         const tempCart = state.cart.map((cartItem) => {\n        //ÜRÜN DAHA ÖNCE EKLENMİŞ VE KULLANICI AYNI ÜRÜNÜ İKİNCİ DEFA EKLİYOR İSE.\n        //SEPETTE BU ÜRÜNDEN 2 TANE GÖZÜKMESİNİ İSTEMEYİZ BUNUN İÇİN\n        //BURADA AMACIMIZ ÜRÜN DAHA ÖNCE EKLENMİŞ VE TEKRAR EKLENİYOR İSE STOK MİKTARINI DEĞİŞTİRMEK\n        if (cartItem.id === id + color) {\n          let newAmount = cartItem.amount + amount;\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n          \n          return { ...cartItem, amount: newAmount };\n        } else {\n          return cartItem\n        }\n      })\n\n      return { ...state, cart: tempCart }\n    } else {\n      //Eğer ürün daha önce eklenmemiş ise otomatik olarak yeni bir eleman gibi davranmasını istiyoruz.\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock,\n      }\n      return { ...state, cart: [...state.cart, newItem] }\n    }\n  }\n\n  return state;\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;\n"]},"metadata":{},"sourceType":"module"}
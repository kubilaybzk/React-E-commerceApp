{"ast":null,"code":"import { ADD_TO_CART, CLEAR_CART, COUNT_CART_TOTALS, REMOVE_CART_ITEM, TOGGLE_CART_ITEM_AMOUNT } from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n  //Ürün eklemek için.\n  if (action.type === ADD_TO_CART) {\n    const {\n      id,\n      color,\n      amount,\n      product\n    } = action.payload; // Bize gönderilen bilgileri alıyoruz.\n\n    const tempItem = state.cart.find(i => i.id === id + color); //Gelen bilgilerden ürünü buluyoruz\n\n    if (tempItem) {\n      const tempCart = state.cart.map(cartItem => {\n        //ÜRÜN DAHA ÖNCE EKLENMİŞ VE KULLANICI AYNI ÜRÜNÜ İKİNCİ DEFA EKLİYOR İSE.\n        //SEPETTE BU ÜRÜNDEN 2 TANE GÖZÜKMESİNİ İSTEMEYİZ BUNUN İÇİN\n        //BURADA AMACIMIZ ÜRÜN DAHA ÖNCE EKLENMİŞ VE TEKRAR EKLENİYOR İSE STOK MİKTARINI DEĞİŞTİRMEK\n        if (cartItem.id === id + color) {\n          let newAmount = cartItem.amount + amount;\n\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n\n          return { ...cartItem,\n            amount: newAmount\n          };\n        } else {\n          return cartItem;\n        }\n      });\n      return { ...state,\n        cart: tempCart\n      };\n    } else {\n      //Eğer ürün daha önce eklenmemiş ise otomatik olarak yeni bir eleman gibi davranmasını istiyoruz.\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock\n      };\n      return { ...state,\n        cart: [...state.cart, newItem]\n      };\n    }\n  } //Ürün silmek için \n\n\n  if (action.type === REMOVE_CART_ITEM) {\n    const tempCart = state.cart.filter(item => item.id !== action.payload);\n    return { ...state,\n      cart: tempCart\n    };\n  } //Sepeti boşaltmak için \n\n\n  if (action.type === CLEAR_CART) {\n    return { ...state,\n      cart: []\n    };\n  } //Sepette ürün miktarını arttırma/azaltma\n\n\n  if (action.type === TOGGLE_CART_ITEM_AMOUNT) {\n    const {\n      id,\n      value\n    } = action.payload;\n    const tempCart = state.cart.map(item => {\n      if (item.id === id) {\n        if (value === 'inc') {\n          let newAmount = item.amount + 1;\n\n          if (newAmount > item.max) {\n            newAmount = item.max;\n          }\n\n          return { ...item,\n            amount: newAmount\n          };\n        }\n\n        if (value === 'dec') {\n          let newAmount = item.amount - 1;\n\n          if (newAmount < 1) {\n            newAmount = 1;\n          }\n\n          return { ...item,\n            amount: newAmount\n          };\n        }\n      }\n\n      return item;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  }\n\n  if (action.type === COUNT_CART_TOTALS) {\n    const {\n      total_items,\n      total_amount\n    } = state.cart.reduce((total, cartItem) => {\n      const {\n        amount,\n        price\n      } = cartItem;\n      total.total_items += amount;\n      total.total_amount += price * amount;\n      return total;\n    }, {\n      total_items: 0,\n      total_amount: 0\n    });\n    return { ...state,\n      total_items,\n      total_amount\n    };\n  }\n\n  return state;\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;","map":{"version":3,"sources":["/home/kbly/Masaüstü/React-E-commerceApp/src/reducers/cart_reducer.js"],"names":["ADD_TO_CART","CLEAR_CART","COUNT_CART_TOTALS","REMOVE_CART_ITEM","TOGGLE_CART_ITEM_AMOUNT","cart_reducer","state","action","type","id","color","amount","product","payload","tempItem","cart","find","i","tempCart","map","cartItem","newAmount","max","newItem","name","image","images","url","price","stock","filter","item","value","total_items","total_amount","reduce","total","Error"],"mappings":"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","sourcesContent":["import {\n  ADD_TO_CART,\n  CLEAR_CART,\n  COUNT_CART_TOTALS,\n  REMOVE_CART_ITEM,\n  TOGGLE_CART_ITEM_AMOUNT,\n} from \"../actions\";\n\nconst cart_reducer = (state, action) => {\n\n  //Ürün eklemek için.\n  if (action.type === ADD_TO_CART) {\n    const { id, color, amount, product } = action.payload; // Bize gönderilen bilgileri alıyoruz.\n    const tempItem = state.cart.find((i) => i.id === id + color); //Gelen bilgilerden ürünü buluyoruz\n    if (tempItem) {\n         const tempCart = state.cart.map((cartItem) => {\n        //ÜRÜN DAHA ÖNCE EKLENMİŞ VE KULLANICI AYNI ÜRÜNÜ İKİNCİ DEFA EKLİYOR İSE.\n        //SEPETTE BU ÜRÜNDEN 2 TANE GÖZÜKMESİNİ İSTEMEYİZ BUNUN İÇİN\n        //BURADA AMACIMIZ ÜRÜN DAHA ÖNCE EKLENMİŞ VE TEKRAR EKLENİYOR İSE STOK MİKTARINI DEĞİŞTİRMEK\n        if (cartItem.id === id + color) {\n          let newAmount = cartItem.amount + amount;\n          if (newAmount > cartItem.max) {\n            newAmount = cartItem.max;\n          }\n          \n          return { ...cartItem, amount: newAmount };\n        } else {\n          return cartItem\n        }\n      })\n\n      return { ...state, cart: tempCart }\n    } else {\n      //Eğer ürün daha önce eklenmemiş ise otomatik olarak yeni bir eleman gibi davranmasını istiyoruz.\n      const newItem = {\n        id: id + color,\n        name: product.name,\n        color,\n        amount,\n        image: product.images[0].url,\n        price: product.price,\n        max: product.stock,\n      }\n      return { ...state, cart: [...state.cart, newItem] }\n    }\n  }\n\n\n  //Ürün silmek için \n\n  if (action.type === REMOVE_CART_ITEM) {\n    const tempCart = state.cart.filter((item) => item.id !== action.payload)\n    return { ...state, cart: tempCart }\n  }\n\n\n  //Sepeti boşaltmak için \n  if (action.type === CLEAR_CART) {\n    return { ...state, cart: [] }\n  }\n  //Sepette ürün miktarını arttırma/azaltma\n  if (action.type === TOGGLE_CART_ITEM_AMOUNT) {\n    const { id, value } = action.payload\n    const tempCart = state.cart.map((item) => {\n      if (item.id === id) {\n        if (value === 'inc') {\n          let newAmount = item.amount + 1\n          if (newAmount > item.max) {\n            newAmount = item.max\n          }\n          return { ...item, amount: newAmount }\n        }\n        if (value === 'dec') {\n          let newAmount = item.amount - 1\n          if (newAmount < 1) {\n            newAmount = 1\n          }\n          return { ...item, amount: newAmount }\n        }\n      }\n      return item\n    })\n\n    return { ...state, cart: tempCart }\n  }\n\n\n  if (action.type === COUNT_CART_TOTALS) {\n    const { total_items, total_amount } = state.cart.reduce(\n      (total, cartItem) => {\n        const { amount, price } = cartItem\n\n        total.total_items += amount\n        total.total_amount += price * amount\n        return total\n      },\n      {\n        total_items: 0,\n        total_amount: 0,\n      }\n    )\n    return { ...state, total_items, total_amount }\n  }\n\n\n\n\n  return state;\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default cart_reducer;\n"]},"metadata":{},"sourceType":"module"}